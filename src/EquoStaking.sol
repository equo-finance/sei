// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";

import {DISTR_CONTRACT} from "src/interfaces/IDistribution.sol";

contract EquoStaking {
    /*//////////////////////////////////////////////////////////////
                                 ERRORS
    //////////////////////////////////////////////////////////////*/

    error EquoStaking__LessThanMinimumAmount();

    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event EquoStaking__TokenStaked(uint256 indexed amount, address indexed account);
    event EquoStaking__TokenUnstaked(uint256 indexed amount, address indexed account);
    event EquoStaking__SeiWithdrawn(uint256 indexed amount, address indexed account);

    /*//////////////////////////////////////////////////////////////
                               MODIFIERS
    //////////////////////////////////////////////////////////////*/

    /*//////////////////////////////////////////////////////////////
                            STATE VARIABLES
    //////////////////////////////////////////////////////////////*/
    uint256 public constant MINIMUM_AMOUNT_TO_STAKE = 0.5 ether;

    /*//////////////////////////////////////////////////////////////
                               FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    constructor() {}

    /*//////////////////////////////////////////////////////////////
                           EXTERNAL FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    function stake() external payable {}
    function unstake() external {}
    function withdraw() external {}

    /*//////////////////////////////////////////////////////////////
                    INTERNAL/PRIVATE VIEW FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    function _getExchangeRate() internal view returns (uint256) {}

    /*//////////////////////////////////////////////////////////////
                     PUBLIC/EXTERNAL VIEW FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    function getExchangeRate() public view returns (uint256) {}
}
